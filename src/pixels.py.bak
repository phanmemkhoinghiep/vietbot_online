"""
LED light pattern like Google Home
"""

from pixel_ring.apa102 import APA102
import time
import threading
import time
from rpi_ws281x import PixelStrip, Color
import argparse

# LED strip configuration:
LED_COUNT = 16      # Number of LED pixels.
#LED_PIN = 12         # GPIO pin connected to the pixels (18 uses PWM!).
LED_PIN = 10        # GPIO pin connected to the pixels (10 uses SPI /dev/spidev0.0).
LED_FREQ_HZ = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA = 10          # DMA channel to use for generating signal (try 10)
LED_BRIGHTNESS = 255  # Set to 0 for darkest and 255 for brightest
LED_INVERT = False    # True to invert the signal (when using NPN transistor level shift)
LED_CHANNEL = 0       # set to '1' for GPIOs 13, 19, 41, 45 or 53
strip = PixelStrip(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL)
strip.begin()

def colorWipe(strip, color, wait_ms=20):
    """Wipe color across display a pixel at a time."""
    for i in range(strip.numPixels()):
        strip.setPixelColor(i, color)
        strip.show()
        time.sleep(wait_ms / 2000.0)


def theaterChase(strip, color, wait_ms=25, iterations=5):
    """Movie theater light style chaser animation."""
    for j in range(iterations):
        for q in range(3):
            for i in range(0, strip.numPixels(), 3):
                strip.setPixelColor(i + q, color)
            strip.show()
            time.sleep(wait_ms / 3000.0)
            for i in range(0, strip.numPixels(), 3):
                strip.setPixelColor(i + q, 0)


def wheel(pos):
    """Generate rainbow colors across 0-255 positions."""
    if pos < 85:
        return Color(pos * 3, 255 - pos * 3, 0)
    elif pos < 170:
        pos -= 85
        return Color(255 - pos * 3, 0, pos * 3)
    else:
        pos -= 170
        return Color(0, pos * 3, 255 - pos * 3)


def rainbow(strip, wait_ms=5, iterations=3):
    """Draw rainbow that fades across all pixels at once."""
    for j in range(128 * iterations):
        for i in range(strip.numPixels()):
            strip.setPixelColor(i, wheel((i + j) & 255))
        strip.show()
        time.sleep(wait_ms / 5000.0)


def rainbowCycle(strip, wait_ms=5, iterations=3):
    """Draw rainbow that uniformly distributes itself across all pixels."""
    for j in range(128 * iterations):
        for i in range(strip.numPixels()):
            strip.setPixelColor(i, wheel(
                (int(i * 256 / strip.numPixels()) + j) & 255))
        strip.show()
        time.sleep(wait_ms / 7000.0)


def theaterChaseRainbow(strip, wait_ms=50):
    """Rainbow movie theater light style chaser animation."""
    for j in range(256):
        for q in range(1):
            for i in range(0, strip.numPixels(), 3):
                strip.setPixelColor(i + q, wheel((i + j) % 255))
            strip.show()
            time.sleep(wait_ms / 1000.0)
            for i in range(0, strip.numPixels(), 3):
                strip.setPixelColor(i + q, 0)

try:
    import queue as Queue
except ImportError:
    import Queue as Queue


class Pixels:
    PIXELS_N = 3

    def __init__(self):
        self.basis = [0] * 3 * self.PIXELS_N
        self.basis[0] = 2
        self.basis[3] = 1
        self.basis[4] = 1
        self.basis[7] = 2

        self.colors = [0] * 3 * self.PIXELS_N
        self.dev = APA102(num_led=self.PIXELS_N)

        self.next = threading.Event()
        self.queue = Queue.Queue()
        self.thread = threading.Thread(target=self._run)
        self.thread.daemon = True
        self.thread.start()

    def wakeup(self, direction=0):

#        rainbow(strip)

        def f():
            self._wakeup(direction)
        self.next.set()
        self.queue.put(f)
        
        
    def listen(self):
#        
        
#        theaterChase(strip, Color(0, 0, 127))
        self.next.set()
        self.queue.put(self._listen)

    def think(self):
        
        self.next.set()
        self.queue.put(self._think)
        

    def speak(self):
       # theaterChaseRainbow(strip)  
#        rainbowCycle(strip)
        self.next.set()
        self.queue.put(self._speak)
        

    def off(self):
        
        self.next.set()
        self.queue.put(self._off)
        

    def _run(self):
        while True:
            func = self.queue.get()
            func()

    def _wakeup(self,direction=0):
        colorWipe(strip, Color(0, 255, 0))
        colorWipe(strip, Color(0, 0, 255))
        self.write([0] * 3 * self.PIXELS_N)
    def _listen(self):
        rainbow(strip)
        self.write([0] * 3 * self.PIXELS_N)
    def _think(self):
        rainbowCycle(strip)
        self.write([0] * 3 * self.PIXELS_N)
    def _speak(self):      
       theaterChaseRainbow(strip)


    def _off(self):
        colorWipe(strip, Color(0, 0, 0))
        self.write([0] * 3 * self.PIXELS_N)

    def write(self, colors):
        for i in range(self.PIXELS_N):
            self.dev.set_pixel(i, int(colors[3*i]), int(colors[3*i + 1]), int(colors[3*i + 2]))

        self.dev.show()


pixels = Pixels()


# if __name__ == '__main__':

    # while True:

        # try:
            # # pixels._wakeup()
            # # time.sleep(5)            
            # pixels._off()                        
            # pixels._listen()
            # pixels._off()            
            # time.sleep(10)                        
            # pixels._think()
            # pixels._off()                        
            # # pixels._speak()
            # # time.sleep(5)            
        # except KeyboardInterrupt:
            # break

    # pixels.off()